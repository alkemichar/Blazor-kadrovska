<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhetos.Persistence</name>
    </assembly>
    <members>
        <member name="M:Rhetos.Persistence.MsSqlExecuter.#ctor(Rhetos.Utilities.ConnectionString,Rhetos.Logging.ILogProvider,Rhetos.Utilities.IUserInfo)">
            <summary>
            This constructor is typically used in deployment time, when persistence transaction does not exist.
            </summary>
        </member>
        <member name="M:Rhetos.Persistence.MsSqlExecuter.#ctor(Rhetos.Utilities.ConnectionString,Rhetos.Logging.ILogProvider,Rhetos.Utilities.IUserInfo,Rhetos.Persistence.IPersistenceTransaction)">
            <summary>
            This constructor is typically used in run-time, when persistence transaction is active, in order to execute
            the SQL queries in the same transaction.
            </summary>
        </member>
        <member name="T:Rhetos.Persistence.EntityFrameworkMappingGenerator">
            <summary>
            The generated EDMX contains both "standard ORM mapping" (same as what would be generated by EF from code-first classes),
            and custom extensions (for example, new custom functions that extend EF LINQ).
            EF DbContext would work without the "standard ORM mapping" part provided (this is a standard approach for code-first),
            but then we would get a performance penalty for EF model initialization. By manually specifying the standard ORM mapping
            in EDMX (by <see cref="T:Rhetos.Persistence.IConceptMapping"/> plugins for <see cref="T:Rhetos.Persistence.EntityFrameworkMappingGenerator"/>)
            we can improve the DbContext initialization time.
            </summary>
        </member>
    </members>
</doc>
